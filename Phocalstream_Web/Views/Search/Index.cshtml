@model Phocalstream_Shared.Data.Model.View.SearchModel
@{
    ViewBag.Title = "Search";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@Styles.Render("~/Content/CSS/Search.css")

@Scripts.Render("~/Content/Scripts/jquery-ui-1.9.2.js",
                "~/Content/Scripts/jquery-lazyload.js")

<!-- Bootstrap Tags Input CSS and JS Files -->
<link href="~/Content/bootstrap-tags/css/bootstrap-tagsinput.css" rel="stylesheet">
<link href="~/Content/CSS/typeahead.css" rel="stylesheet">
<script src="~/Content/bootstrap-tags/js/bootstrap-tagsinput.js"></script>
<script src="~/Content/typeahead/typeahead.bundle.js"></script>

<script type="text/javascript" src="~/Content/Scripts/bootbox.min.js"></script>
<script type="text/javascript" src="~/Content/Scripts/PhotoDownload.js"></script>
<script type="text/javascript" src="~/Content/Scripts/PhotoSaveCollection.js"></script>
<script type="text/javascript" src="~/Content/Scripts/PhotoTimelapse.js"></script>
<script type="text/javascript" src="~/Content/Scripts/PhotoSearchResults.js"></script>

<!-- Knockout.js -->
<script src="~/Content/Scripts/knockout-3.2.0.js"></script>

<script>
    var limit = 500;
    var visibleItems = "";
    var saveIds = "";

    // dependency variables for PhotoSearchResults.js
    var totalPhotoCount = 0;
    var basePhotoUrl = "@Url.Action("Index", "Photo", null)?photoId=";
</script>

<div class="search-params">
    <!-- Sort By -->
    <div class="search-row row">
        <div class="col-md-12">
            <strong>Results</strong>
        </div>
    </div>
    <div class="search-row row">
        <div class="col-md-4">
            <label class="filter-label">Sort By</label>
        </div>
        <div class="col-md-8">
            <div class="btn-group btn-group-justified">
                <label class="btn btn-default" data-bind="css: { 'active': group() === 'date' }">
                    <input type="radio" name="sortoptions" id="date" data-bind="checked: group, checkedValue: 'date'">Date
                </label>
                <label class="btn btn-default" data-bind="css: { 'active': group() === 'site' }">
                    <input type="radio" name="sortoptions" id="group" data-bind="checked: group, checkedValue: 'site'">Site
                </label>
            </div>
        </div>
    </div>
    <div class="search-row row">
        <div class="col-md-4">
            <label class="filter-label">Thumbnails</label>
        </div>
        <div class="col-md-8">
            <div class="btn-group full-width">
                <!-- Change button type based on status -->
                <button type="button" class="btn btn-default full-width dropdown-toggle" data-toggle="dropdown">
                    <span data-bind="text: size().name"> </span> <span class="caret"></span>
                </button>

                <!-- Loop for status -->
                <ul class="dropdown-menu" role="menu" data-bind="foreach: sizes">
                    <!-- Disable item if selected -->
                    <li data-bind="css: {'active' : name == $parent.size().name}">
                        <!-- This is where I need to bind the click to change the value of the status -->
                        <a href="#" data-bind="click: $parent.size"><span data-bind="text: name"></span></a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    
    <hr class="featurette-divider" />

    <!-- FILTERS -->
    <div class="search-row">
        <strong>Filters</strong>
    </div>

    <!-- Sites -->
    <div class="search-row">
        <div class="input-group">
            <span class="input-group-addon">Sites</span>
            <input id="site-field" data-bind="value: siteNames" />
        </div>
    </div>

    <!-- Tags -->
    <div class="search-row">
        <div class="input-group">
            <span class="input-group-addon">Tags</span>
            <input id="tag-field" data-bind="value: tagNames" />
        </div>
    </div>

    <!-- Dates -->
    <div class="search-row">
        <div class="input-group">
            <span class="input-group-addon">Dates</span>
            <input class="form-control" data-bind="value: dates" />
        </div>
    </div>

    <!-- Months -->
    <div class="search-row">
        <div class="row">
            <div class="col-md-8">
                <label class="filter-label" data-toggle="collapse" data-target="#months-collapse" aria-expanded="false" aria-controls="months-collapse">Months <span class="caret"></span></label>
            </div>
            <div class="col-md-4">
                <button id="clear-months" type="button" class="btn btn-danger btn-xs pull-right" data-bind="click: clearMonths, visible: selectedMonths().length > 0">
                    <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Clear
                </button>
            </div>
        </div>
        <div class="collapse" id="months-collapse">
            <div class="row text-center" data-bind="foreach: months">
                <div class="col-md-6">
                    <label>
                        <input type="checkbox" data-bind="attr: {id: month, value: month}, checked: $root.selectedMonths, click: $root.toggleAssociation" />
                        <span data-bind="css: { 'selected' : Selected }, text: name"></span>
                    </label>
                </div>
            </div>
        </div>
    </div>

    <!-- Hours -->
    <div class="search-row">
        <div class="row">
            <div class="col-md-8">
                <label class="filter-label" data-toggle="collapse" data-target="#hours-collapse" aria-expanded="false" aria-controls="hours-collapse">Times of Day <span class="caret"></span></label>
            </div>
            <div class="col-md-4">
                <button id="clear-times" type="button" class="btn btn-danger btn-xs pull-right" data-bind="click: clearTimes, visible: selectedHours().length > 0">
                    <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Clear
                </button>
            </div>
        </div>
        <div class="collapse" id="hours-collapse">
            <div class="row text-center" data-bind="foreach: hours">
                <div class="col-md-3">
                    <label>
                        <input type="checkbox" data-bind="value: name, checked: $root.selectedHours, click: $root.toggleAssociation" />
                        <span data-bind="css: { 'selected' : Selected }, text: name"></span>
                    </label>
                </div>
            </div>
        </div>
    </div>

    <hr class="featurette-divider" />

    <!-- Query and Results -->
    <div class="search-row text-center">
        <div class="row">
            <div class="col-md-12">
                <p class="search-results"><strong data-bind="text: query"></strong></p>
            </div>
            <div class="col-md-12">
                <!-- ko if: selectedCount() == 0 -->
                    <!-- ko if: queryResults() == 1 -->
                    <p class="label label-info">Found <strong data-bind="text: queryResults"></strong> photo</p>
                    <!-- /ko -->
                    <!-- ko ifnot: queryResults() == 1 -->
                    <p class="label label-info">Found <strong data-bind="text: queryResults"></strong> photos</p>
                    <!-- /ko -->
                <!-- /ko -->
                <!-- ko ifnot: selectedCount() == 0 -->
                    <!-- ko if: selectedCount() == 1 -->
                    <p class="label label-info"><strong data-bind="text: selectedCount"></strong> of <strong data-bind="text: queryResults"></strong> photo selected</p>
                    <!-- /ko -->
                    <!-- ko ifnot: selectedCount() == 1 -->
                    <p class="label label-info"><strong data-bind="text: selectedCount"></strong> of <strong data-bind="text: queryResults"></strong> photos selected</p>
                    <!-- /ko -->
                    <button id="clear-selection" type="button" class="btn btn-danger btn-xs pull-right" data-bind="click: clearSelected, visible: selectedCount() > 0">
                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Clear
                    </button>
                <!-- /ko -->
            </div>
        </div>
    </div>

    <div class="search-row">
        <div class="btn-group btn-group-justified">
            <a data-bind="click: timelapse, enable: queryResults() > 0" class="btn btn-default">Timelapse</a>
            @if (Request.IsAuthenticated)
            {
                <a data-bind="click: saveCollection, enable: queryResults() > 0" class="btn btn-default">Save</a>
            }
            @if (Request.IsAuthenticated && User.IsInRole("Admin"))
            {
                <a data-bind="click: download, enable: queryResults() > 0" class="btn btn-default">Download</a>
            }
        </div>
    </div>
</div>
<div class="results">
    <div id="partial" class="row">
    <div data-bind="visible: search() === false" class="col-md-10 col-md-offset-1">
        <p class="alert alert-warning"><strong>Please selected at least one search parameter.</strong></p>
    </div>
    <ul id="ul-holder" class="col-md-12" data-bind="foreach: photos">
        <li data-bind="attr: { id: 'photo-li-' + $data }" class="search-photo">
            <p class="img-date"></p>
            <img data-bind="attr: { id: 'photo-' + $data, src: '/api/photo/low/' + $data }, click: $root.selectPhoto" class="photo" />
        </li>
    </ul>
        <div class="col-md-4 col-md-offset-4">
            <button id="load-more" class="btn btn-info full-width" data-bind="click: loadMore, visible: remainingCount() > 0">Load <span data-bind="text: remainingCount"></span> More Photos</button>
        </div>
        </div>
</div>

<script type="text/javascript">

    function Month(month, name) {
        var self = this;

        self.month = month;
        self.name = name;
        self.Selected = ko.observable(false);
    }

    function Hour(hour, name) {
        var self = this;

        self.hour = hour;
        self.name = name;
        self.Selected = ko.observable(false);
    }

    function asyncComputed(evaluator, owner) {
        var result = ko.observable();

        ko.computed(function () {
            // Get the $.Deferred value, and then set up a callback so that when it's done,
            // the output is transferred onto our "result" observable
            evaluator.call(owner).done(result);
        });

        return result;
    }

    function ViewModel() {
        var self = this;
        
        self.search = ko.observable(false);

        self.index = ko.observable(0);
        self.index.extend({ notify: 'always' });

        self.remainingCount = ko.computed(function () {
            var total = 0;
            if (self.queryResults) {
                var total = self.queryResults();
            }

            var currentlyShown = (self.index() + 1) * limit;

            if (total <= currentlyShown) {
                return 0;
            }
            else {
                var nextShown = currentlyShown + limit;
                if (total <= nextShown) {
                    return total - currentlyShown;
                }
                else {
                    return limit;
                }
            }
        });

        self.group = ko.observable("site");

        self.selectedPhotos = ko.observableArray();
        self.selectedCount = ko.computed(function() {
            return self.selectedPhotos().length;
        });

        self.selectPhoto = function (item) {
            var id = item;

            var img = $("#photo-" + id);

             var selected = img.hasClass('bordered');
             img.toggleClass('bordered', !selected);


             if (self.selectedPhotos.indexOf(id) == -1) {
                 self.selectedPhotos.push(id);
             }
             else {
                 self.selectedPhotos.remove(id);
             }

            return true;
        }


        self.sizes = [{name: "Small"}, {name: "Medium"}, {name: "Large"}]; 
        self.size = ko.observable(self.sizes[0]);

        self.size.subscribe(function (newSize) {
            switch (newSize.name) {
                case 'Small' :
                    resizeThumbnail(100);
                    break;
                case 'Medium':
                    resizeThumbnail(200);
                    break;
                case 'Large':
                    resizeThumbnail(400);
                    break;
            }
        });

        self.photos = ko.observableArray([]);

        self.siteNames = ko.observable();
        self.tagNames = ko.observable();
        self.dates = ko.observable();

        self.selectedMonths = ko.observableArray();
        self.months = ko.observableArray([
            new Month(1, "January"),
            new Month(2, "February"),
            new Month(3, "March"),
            new Month(4, "April"),
            new Month(5, "May"),
            new Month(6, "June"),
            new Month(7, "July"),
            new Month(8, "August"),
            new Month(9, "September"),
            new Month(10, "October"),
            new Month(11, "November"),
            new Month(12, "December")
        ]);

        self.selectedHours = ko.observableArray();
        self.hours = ko.observableArray([
            new Hour(0, "0000"),
            new Hour(1, "0100"),
            new Hour(2, "0200"),
            new Hour(3, "0300"),
            new Hour(4, "0400"),
            new Hour(5, "0500"),
            new Hour(6, "0600"),
            new Hour(7, "0700"),
            new Hour(8, "0800"),
            new Hour(9, "0900"),
            new Hour(10, "1000"),
            new Hour(11, "1100"),
            new Hour(12, "1200"),
            new Hour(13, "1300"),
            new Hour(14, "1400"),
            new Hour(15, "1500"),
            new Hour(16, "1600"),
            new Hour(17, "1700"),
            new Hour(18, "1800"),
            new Hour(19, "1900"),
            new Hour(20, "2000"),
            new Hour(21, "2100"),
            new Hour(22, "2200"),
            new Hour(23, "2300")
        ]);

        self.toggleAssociation = function (item) {
            var selected = item.Selected();
            item.Selected(!selected);

            return true;
        }

        clearMonths = function() {
            ko.utils.arrayForEach(self.selectedMonths(), function(month) {
                self.toggleAssociation(self.months()[month - 1]);
            });
            self.selectedMonths.removeAll();
        }

        clearTimes = function() {
            ko.utils.arrayForEach(self.selectedHours(), function(hour) {
                self.toggleAssociation(self.hours()[hour.substring(0,2)]);
            });
            self.selectedHours.removeAll();
        }

        clearSelected = function() {
            ko.utils.arrayForEach(self.selectedPhotos(), function (id) {
                var img = $("#photo-" + id);
                var selected = img.hasClass('bordered');
                img.toggleClass('bordered', !selected);
            })
            self.selectedPhotos.removeAll();
        }

        self.monthText = ko.computed(function () {
            var monthsSelected = self.selectedMonths();
            monthsSelected.sort(function(a, b){return a-b} );

            var months = ["January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ]

            var monthNameArray = [];
            for (var i = 0; i < monthsSelected.length; i++) {
                var index = monthsSelected[i];
                monthNameArray.push(months[index - 1]);
            }

            return monthNameArray.join(', ');
        });

        self.hourText = ko.computed(function () {
            var hoursSelected = self.selectedHours();
            hoursSelected.sort();

            return hoursSelected.join(', ');
        });

        self.hourQuery = ko.computed(function () {
            var hours = self.selectedHours();

            var trimmedHours = []
            for (var i = 0; i < hours.length; i++) {
                trimmedHours.push(hours[i].substring(0, 2));
            }

            return trimmedHours.toString();
        });

        self.query = ko.computed(function () {
            var found = false;
            var q = "Searching for photos ";

            if (self.siteNames() != null && self.siteNames().length != 0) {
                var siteSplit = self.siteNames().split(',');

                if (siteSplit.length == 1) {
                    q += "from " + siteSplit[0] + "";
                }
                else if (siteSplit.length == 2) {
                    q += "from " + siteSplit[0] + " or " + siteSplit[1] + "";
                }
                else {
                    q += "from ";
                    for (var i = 0; i < siteSplit.length - 1; i++)
                    {
                        q += siteSplit[i] + ", ";
                    }
                    q += " or " + siteSplit[siteSplit.length - 1] + "";
                }
                found = true;
            }

            if (self.tagNames() != null && self.tagNames().length != 0) {
                if (found) {
                    q += ", and "
                }
                
                var tagSplit = self.tagNames().split(',');

                if (tagSplit.length == 1) {
                    q += "tagged with " + tagSplit[0] + "";
                }
                else if (tagSplit.length == 2) {
                    q += "tagged with " + tagSplit[0] + " or " + tagSplit[1] + "";
                }
                else {
                    q += "tagged with ";
                    for (var i = 0; i < tagSplit.length - 1; i++)
                    {
                        q += tagSplit[i] + ", ";
                    }
                    q += " or " + tagSplit[tagSplit.length - 1] + "";
                }
                found = true;
            }

            if (self.dates() != null && self.dates().length != 0) {
                if (found) {
                    q += ", and "
                }

                var dateSplit = self.dates().split(',');

                if (dateSplit.length == 1) {
                    q += "taken on " + dateSplit[0] + "";
                }
                else if (dateSplit.length == 2) {
                    q += "taken on " + dateSplit[0] + " or " + dateSplit[1] + "";
                }
                else {
                    q += "taken on ";
                    for (var i = 0; i < dateSplit.length - 1; i++)
                    {
                        q += dateSplit[i] + ", ";
                    }
                    q += " or " + dateSplit[dateSplit.length - 1] + "";
                }
                found = true;
            }

            if (self.selectedMonths().length != 0) {
                if (found) {
                    q += ", and "
                }

                var monthSplit = self.monthText().split(',');

                if (monthSplit.length == 1) {
                    q += "taken during the month of " + monthSplit[0] + "";
                }
                else if (monthSplit.length == 2) {
                    q += "taken during the months of " + monthSplit[0] + " or " + monthSplit[1] + "";
                }
                else {
                    q += "taken during the months of ";
                    for (var i = 0; i < monthSplit.length - 1; i++)
                    {
                        q += monthSplit[i] + ", ";
                    }
                    q += " or " + monthSplit[monthSplit.length - 1] + "";
                }
                found = true;
            }

            if (self.selectedHours().length != 0) {
                if (found) {
                    q += ", and "
                }

                var hourSplit = self.hourText().split(',');

                if (hourSplit.length == 1) {
                    q += "taken during the hour of " + hourSplit[0] + "";
                }
                else if (hourSplit.length == 2) {
                    q += "taken during the hours of " + hourSplit[0] + " or " + hourSplit[1] + "";
                }
                else {
                    q += "taken during the hours of ";
                    for (var i = 0; i < hourSplit.length - 1; i++)
                    {
                        q += hourSplit[i] + ", ";
                    }
                    q += " or " + hourSplit[hourSplit.length - 1] + "";
                }
                found = true;
            }

            if (found) {
                return q;
            }
            else {
                return "Searching for all photos";
            }
        });

        self.queryResults = asyncComputed(function () {
            // This is only trigged if the query changes, so reset paginations
            self.index(0);

            return $.ajax("/api/search/count", {
                data: {
                    hours: this.hourQuery(),
                    months: this.selectedMonths().toString(),
                    sites: this.siteNames,
                    tags: this.tagNames,
                    dates: this.dates,
                    group: this.group()
                }
            });
        }, this);
        self.queryResults.extend({ notify: 'always' });
        
        self.getPhotos = function() {
            if (self.query() == "Searching for all photos") {
                self.search(false);

                self.photos.removeAll();
                self.selectedPhotos.removeAll();

                visibleItems = "";
                totalPhotoCount = 0;
            }
            else {
                self.search(true);

                $.ajax("/api/search/getphotos", {
                    data: {
                        hours: this.hourQuery(),
                        months: this.selectedMonths().toString(),
                        sites: this.siteNames,
                        tags: this.tagNames,
                        dates: this.dates,
                        group: this.group(),
                        index: this.index,
                        limit: limit
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        alert(textStatus + ': ' + errorThrown);
                    },
                    success: function(data) {
                        // Split the data into an array of photo ids
                        var ids = data.split(',');
                    
                        // If the index == 0, then this is the first batch of photos for the query
                        // So the previous query should be removed
                        if (self.index() == 0) {
                            self.photos.removeAll();
                            self.selectedPhotos.removeAll();

                            visibleItems = data;
                            totalPhotoCount = ids.length;
                        } 
                            // Else, just append the data and sum the length
                        else {
                            visibleItems += "," + data;
                            totalPhotoCount += ids.length;
                        }

                        // Add the new photos to the array, then let Knockout know the value changed
                        var array = self.photos();
                        ko.utils.arrayPushAll(array, ids);
                        self.photos.valueHasMutated();

                        // Initialize the views for proper size
                        initialize();
                    }
                });
            }
        }

        self.selectedMonths.subscribe(function(newValue) {
            self.getPhotos();
        });
        self.selectedHours.subscribe(function(newValue) {
            self.getPhotos();
        });
        self.siteNames.subscribe(function(newValue) {
            self.getPhotos();
        });
        self.tagNames.subscribe(function(newValue) {
            self.getPhotos();
        });
        self.dates.subscribe(function(newValue) {
            self.getPhotos();
        });
        self.index.subscribe(function(newValue) {
            self.getPhotos();
        });

        self.loadMore = function() {
            var previousIndex = self.index();
            self.index(previousIndex + 1);
        }

        self.timelapse = function() {
            var timelapseIds = "";

            if (self.selectedCount() == 0) {
                timelapseIds = visibleItems;
            }
            else {
                timelapseIds = self.selectedPhotos().join(",");
            }

            var form;
            form = $('<form />', {
                action: '/photo/timelapse',
                method: 'POST',
                target: '_blank',
                style: 'display: none;'
            });

            form.append($('<input/>', {
                type: 'hidden',
                name: 'photoIds',
                value: timelapseIds
            }));
            form.appendTo('body').submit();
        }

        self.saveCollection = function() {
            if (self.selectedCount() == 0) {
                saveIds = visibleItems;
            }
            else {
                saveIds = self.selectedPhotos().join(",");
            }
            saveCollectionPrompt();
        }

        self.download = function() {
            bootbox.confirm("Are you sure you want to download the images? The download may take some time. A download link will be sent when the process has finished.", function (result) {
                if (result) {
                    var downloadIds = "";

                    if (self.selectedCount() == 0) {
                        downloadIds = visibleItems;
                    }
                    else {
                        downloadIds = self.selectedPhotos().join(",");
                    }

                    $.ajax({
                        url: '/api/sitecollection/RawDownload',
                        data: "photoIds=" + downloadIds,
                        dataType: "string",
                        type: "POST",
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert(errorThrown);
                        }
                    })
                }
            });
        }
    }

    ko.applyBindings(new ViewModel())
</script>

<script type="text/javascript">
    $(document).ready(function() {

        var availableTags = @Html.Raw(Json.Encode(Model.AvailableTags));
        var sites = @Html.Raw(Json.Encode(Model.SiteNames));

        var substringMatcher = function(strs) {
            return function findMatches(q, cb) {
                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                // iterate through the pool of strings and for any string that
                // contains the substring `q`, add it to the `matches` array
                $.each(strs, function(i, str) {
                    if (substrRegex.test(str)) {

                        // the typeahead jQuery plugin expects suggestions to a
                        // JavaScript object, refer to typeahead docs for more info
                        matches.push({ value: str });
                    }
                });

                cb(matches);
            };
        };

        // tags tags input
        $('#tag-field').tagsinput();
        $('#tag-field').tagsinput('input').typeahead({
            minLength: 2,
            highlight: true,
        },
        {
            name: 'available-tags',
            source: substringMatcher(availableTags)
        }).bind('typeahead:selected', $.proxy(function (obj, datum) {
            this.tagsinput('add', datum.value);
            this.tagsinput('input').typeahead('val', '');
        }, $('#tag-field')));

        // site tags input
        $('#site-field').tagsinput();
        $('#site-field').tagsinput('input').typeahead({
            minLength: 2,
            highlight: true,
        },
        {
            name: 'sites',
            source: substringMatcher(sites)
        }).bind('typeahead:selected', $.proxy(function (obj, datum) {
            this.tagsinput('add', datum.value);
            this.tagsinput('input').typeahead('val', '');
        }, $('#site-field')));

        //add a random site or tag
        var bool = (Math.random() > 0.5);
        if (bool) {
            $('#site-field').tagsinput('add', sites[Math.floor(Math.random() * sites.length)]);
        }
        else {
            $('#tag-field').tagsinput('add', availableTags[Math.floor(Math.random() * availableTags.length)]);
        }
    });


    //User Defined Collection
    var collectionIds = [];
    function registerCollectionSelection(collectionId) {
        if (jQuery.inArray(collectionId, collectionIds) == -1) {
            collectionIds.push(collectionId);
        }
        else {
            var index = collectionIds.indexOf(collectionId);
            collectionIds.splice(index, 1);
        }
    }

    function saveCollectionModalButton() {
        var newName = $('#newCollectionName').val();
        if (newName != "") {
            saveCollection(newName);
        }

        if (collectionIds.length > 0) {
            addToCollection(collectionIds);
        }
    }

    function cancelCollectionModalButton() {
    }

    function addToCollection(collectionIds) {
        $.ajax({
            url : '/api/usercollection/AddToCollection?collectionIds='+collectionIds.join(',')+'&photoIds='+saveIds,
            type : 'POST'
        });
    }

    function saveCollection(collectionName) {
        $.ajax({
            url : '/api/usercollection/SaveUserCollection?photoIds='+saveIds+'&collectionName='+collectionName,
            type : "POST"
        });
    }
    
    $(document).ready(function() { 
        $('.list-group-item').click(function () {
            $(this).toggleClass('list-group-item-success');

            registerCollectionSelection($(this).attr('id'));
        });
    });

</script>

<!-- Save User Collection Modal -->
<div id="userCollectionModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title">User Collections</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <label class="col-md-12" for="newCollectionName">New Collection Name</label>
                    <div class="col-md-12">
                        <input id="newCollectionName" name="newCollectionName" type="text" placeholder="New Collection Name" class="form-control input-md">
                    </div>
                </div>

                @if (@Model.UserCollections != null)
                {
                    <hr class="featurette-divider" />

                    <div class="row">
                        <label class="col-md-12">Or, Add To Existing</label>
                        <div class="col-md-12">
                            <ul class="list-group user-collection-list">
                                @foreach (var col in Model.UserCollections.Collections)
                                {
                                    <li id="@col.ID" class="list-group-item">
                                        <span class="badge">@col.Photos.Count</span>@col.Name
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal" onclick="javascript:cancelCollectionModalButton()">Cancel</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="javascript:saveCollectionModalButton()">Add To Collections</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
