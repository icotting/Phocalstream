@model Phocalstream_Shared.Data.Model.View.SearchModel
@{
    ViewBag.Title = "Search";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@Styles.Render("~/Content/CSS/Search.css")

<!-- Bootstrap Tags Input CSS and JS Files -->
<link href="~/Content/bootstrap-tags/css/bootstrap-tagsinput.css" rel="stylesheet">
<link href="~/Content/CSS/typeahead.css" rel="stylesheet">
<script src="~/Content/bootstrap-tags/js/bootstrap-tagsinput.js"></script>
<script src="~/Content/typeahead/typeahead.bundle.js"></script>

<!-- Knockout.js -->
<script src="~/Content/Scripts/knockout-3.2.0.js"></script>

<div class="background">
    <img class="background-img" src="/api/photo/high/@Model.BackgroundImageID" />
</div>

<div class="shadow">

</div>

<div class="container">
    <div class="content">

        <div class="text-center">
            <h1 class="page-header title">Phocalstream Power Search</h1>
        </div>

        <div class="alert alert-success" role="alert">
            <div class="row vertical-align">
                <div class="col-md-9">
                    <h3 class="search-results"><strong data-bind="text: query"></strong></h3>
                </div>
                <div class="col-md-3 text-center">
                    <h3 class="search-results">Photos: <strong data-bind="text: queryResults"></strong></h3>
                </div>
            </div>
        </div>

        <!-- Sites -->
        <div class="search-row">
            <div class="row">
                <div class="col-md-4">
                    Sites
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <input id="site-field" data-bind="value: siteNames" />
                </div>
            </div>
        </div>

        <!-- Tags -->
        <div class="search-row">
            <div class="row">
                <div class="col-md-4">
                    Tags
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <input id="tag-field" data-bind="value: tagNames" />
                </div>
            </div>
        </div>

        <!-- Dates -->
        <div class="search-row">
            <div class="row">
                <div class="col-md-4">
                    Dates
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <input class="form-control" data-bind="value: dates" />
                </div>
            </div>
        </div>

        <!-- Months -->
        <div class="search-row">
            <div class="page-header">
                <div class="row">
                    <div class="col-md-4">
                        <label>Months</label>
                    </div>
                </div>

                <div class="row text-center" data-bind="foreach: months">
                    <div class="col-md-2">
                        <label>
                            <input type="checkbox" data-bind="value: month, checked: $root.selectedMonths, click: $root.toggleAssociation" />
                            <span data-bind="css: { 'selected' : Selected }, text: name"></span>
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <!-- Hours -->
        <div class="search-row">
            <div class="page-header">
                <div class="row">
                    <div class="col-md-4">
                        <label>Times Of Day</label>
                    </div>
                </div>

                <div class="row text-center" data-bind="foreach: hours">
                    <div class="col-md-2">
                        <label>
                            <input type="checkbox" data-bind="value: name, checked: $root.selectedHours, click: $root.toggleAssociation" />
                            <span data-bind="css: { 'selected' : Selected }, text: name"></span>
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    function Month(month, name) {
        var self = this;

        self.month = month;
        self.name = name;
        self.Selected = ko.observable(false);
    }

    function Hour(hour, name) {
        var self = this;

        self.hour = hour;
        self.name = name;
        self.Selected = ko.observable(false);
    }

    function asyncComputed(evaluator, owner) {
        var result = ko.observable();

        ko.computed(function () {
            // Get the $.Deferred value, and then set up a callback so that when it's done,
            // the output is transferred onto our "result" observable
            evaluator.call(owner).done(result);
        });

        return result;
    }

    function ViewModel() {
        var self = this;

        self.siteNames = ko.observable();
        self.tagNames = ko.observable();
        self.dates = ko.observable();

        self.selectedMonths = ko.observableArray();
        self.months = ko.observableArray([
            new Month(1, "January"),
            new Month(2, "February"),
            new Month(3, "March"),
            new Month(4, "April"),
            new Month(5, "May"),
            new Month(6, "June"),
            new Month(7, "July"),
            new Month(8, "August"),
            new Month(9, "September"),
            new Month(10, "October"),
            new Month(11, "November"),
            new Month(12, "December")
        ]);

        self.selectedHours = ko.observableArray();
        self.hours = ko.observableArray([
            new Hour(0, "0000"),
            new Hour(1, "0100"),
            new Hour(2, "0200"),
            new Hour(3, "0300"),
            new Hour(4, "0400"),
            new Hour(5, "0500"),
            new Hour(6, "0600"),
            new Hour(7, "0700"),
            new Hour(8, "0800"),
            new Hour(9, "0900"),
            new Hour(10, "1000"),
            new Hour(11, "1100"),
            new Hour(12, "1200"),
            new Hour(13, "1300"),
            new Hour(14, "1400"),
            new Hour(15, "1500"),
            new Hour(16, "1600"),
            new Hour(17, "1700"),
            new Hour(18, "1800"),
            new Hour(19, "1900"),
            new Hour(20, "2000"),
            new Hour(21, "2100"),
            new Hour(22, "2200"),
            new Hour(23, "2300")
        ]);

        self.toggleAssociation = function (item) {
            var selected = item.Selected();
            item.Selected(!selected);
            return true;
        }

        self.monthText = ko.computed(function () {
            var monthsSelected = self.selectedMonths();
            monthsSelected.sort(function(a, b){return a-b} );

            var months = ["January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ]

            var monthNameArray = [];
            for (var i = 0; i < monthsSelected.length; i++) {
                var index = monthsSelected[i];
                monthNameArray.push(months[index - 1]);
            }

            return monthNameArray.join(', ');
        });

        self.hourText = ko.computed(function () {
            var hoursSelected = self.selectedHours();
            hoursSelected.sort();

            return hoursSelected.join(', ');
        });

        self.hourQuery = ko.computed(function () {
            var hours = self.selectedHours();

            var trimmedHours = []
            for (var i = 0; i < hours.length; i++) {
                trimmedHours.push(hours[i].substring(0, 2));
            }

            return trimmedHours.toString();
        });

        self.query = ko.computed(function () {
            var found = false;
            var q = "Searching for photos ";

            if (self.siteNames() != null && self.siteNames().length != 0) {
                q += "from " + self.siteNames() + " ";
                found = true;
            }

            if (self.tagNames() != null && self.tagNames().length != 0) {
                if (found) {
                    q += "and "
                }
                q += "tagged with " + self.tagNames() + " ";
                found = true;
            }

            if (self.dates() != null && self.dates().length != 0) {
                if (found) {
                    q += "and "
                }
                q += "taken on " + self.dates() + " ";
                found = true;
            }

            if (self.selectedMonths().length != 0) {
                if (found) {
                    q += "and "
                }
                q += "taken during the months of " + self.monthText() + " ";
                found = true;
            }

            if (self.selectedHours().length != 0) {
                if (found) {
                    q += "and "
                }
                q += "taken during the hours of " + self.hourText() + " ";
                found = true;
            }

            if (found) {
                return q;
            }
            else {
                return "Searching for all photos";
            }
        });

        this.queryResults = asyncComputed(function () {
            // Whenever "pageIndex", "sortColumn", or "sortDirection" change, this function will re-run
            return $.ajax("/api/search/count", {
                data: {
                    hours: this.hourQuery(),
                    months: this.selectedMonths().toString(),
                    sites: this.siteNames,
                    tags: this.tagNames,
                    dates: this.dates
                }
            });
        }, this);
    }

    ko.applyBindings(new ViewModel())
</script>

<script type="text/javascript">
    $(document).ready(function() {

        var availableTags = @Html.Raw(Json.Encode(Model.AvailableTags));
        var sites = @Html.Raw(Json.Encode(Model.SiteNames));

        var substringMatcher = function(strs) {
            return function findMatches(q, cb) {
                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                // iterate through the pool of strings and for any string that
                // contains the substring `q`, add it to the `matches` array
                $.each(strs, function(i, str) {
                    if (substrRegex.test(str)) {

                        // the typeahead jQuery plugin expects suggestions to a
                        // JavaScript object, refer to typeahead docs for more info
                        matches.push({ value: str });
                    }
                });

                cb(matches);
            };
        };

        $('#tag-field').tagsinput();
        $('#tag-field').tagsinput('input').typeahead({
            minLength: 2,
            highlight: true,
        },
        {
            name: 'available-tags',
            source: substringMatcher(availableTags)
        }).bind('typeahead:selected', $.proxy(function (obj, datum) {
            this.tagsinput('add', datum.value);
            this.tagsinput('input').typeahead('val', '');
        }, $('#tag-field')));

        $('#site-field').tagsinput();
        $('#site-field').tagsinput('input').typeahead({
            minLength: 2,
            highlight: true,
        },
        {
            name: 'sites',
            source: substringMatcher(sites)
        }).bind('typeahead:selected', $.proxy(function (obj, datum) {
            this.tagsinput('add', datum.value);
            this.tagsinput('input').typeahead('val', '');
        }, $('#site-field')));
    });
</script>
