@model Phocalstream_Shared.Data.Model.View.AddUserCameraSite
@{
    ViewBag.Title = "CreateUserSite";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Styles.Render("~/Content/CSS/Account.css")

@Scripts.Render("~/Content/Scripts/jquery.validate.unobtrusive.min.js",
                "~/Content/Scripts/knockout-3.2.0.js",
                "~/Content/Scripts/knockout.validation.min.js",
                "~/Content/Scripts/CreateUserSiteViewModel.js")

<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
<script type="text/javascript">

    var viewModel;

    var map;
    var geocoder;
    var marker;

    $(document).ready(function () {
        ko.validation.init({
            registerExtenders: true,
            messagesOnModified: true,
            insertMessages: true,
            decorateElement: true,
            errorElementClass: 'has-error'
        });

        viewModel = new ViewModel();
        ko.applyBindings(viewModel);

        loadMap();
    });

</script>

<div class="container">
    <div class="content">
        <div class="text-center relative">
            <h1 class="page-header">Create Collection Site</h1>
        </div>

        @if (@ViewBag.Message != null)
        {
            <div class="alert alert-warning alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                @Html.Raw(ViewBag.Message)
            </div>
        }

        <div class="row">
            <div class="col-md-12">
                <div class="form-group" data-bind="validationElement: cameraSiteName">
                    <label class="control-label" for="cameraSiteName">Camera Site Name</label>
                    <input type="text" class="form-control" data-bind="value: cameraSiteName" />
                </div>
            </div>
        </div>

        <hr class="featurette-divider" />

        <div class="row">
            <div id="addressView" class="col-md-6">
                <div class="form-group">
                    <div class="input-group">
                        <input type="text" class="form-control" id="cameraAddress" placeholder="Camera Address" data-bind="value: cameraAddress">
                        <span class="input-group-btn">
                            <button onclick="javascript:plot('address')" class="btn btn-info" type="button">Plot on Map</button>
                        </span>
                    </div>
                </div>
                <div class="form-group text-center">
                    <div class="row">
                        <div class="col-md-5">
                            <hr class="featurette-divider" />
                        </div>
                        <div class="col-md-2">
                            <label class="create-or-label"> or </label>
                        </div>
                        <div class="col-md-5">
                            <hr class="featurette-divider" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-5" data-bind="validationElement: latitude">
                            <input type="number" class="form-control" placeholder="Latitude" data-bind="value: latitude" />
                        </div>
                        <div class="col-md-7" data-bind="validationElement: longitude">
                            <div class="input-group">
                                <input type="number" class="form-control" placeholder="Longitude" data-bind="value: longitude" />
                                <span class="input-group-btn">
                                    <a id="plot" onclick="javascript:plot('coordinates')" class="btn btn-info">Plot on Map</a>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="map-canvas" id="map-canvas"></div>
                <div class="alert alert-danger" role="alert" data-bind="visible: errorMessage() != ''">
                    <p data-bind="text: errorMessage"></p>
                </div>
            </div>
        </div>

        <hr class="featurette-divider" />

        <input id="county" name="County" type="hidden" data-bind="value: county" />
        <input id="state" name="State" type="hidden" data-bind="value: state" />

        <div class="row">
            <div class="col-md-4 col-md-offset-8">
                <button type="submit" class="btn btn-success pull-right" data-bind="click: submit, enable: errors().length === 0">Create New Collection</button>
            </div>
        </div>

    </div>
</div>

<script type="text/javascript">

    function loadMap() {
        var mapOptions = {
            zoom: 4,
            center: new google.maps.LatLng(38, -95),
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
        geocoder = new google.maps.Geocoder();
    }

    function plot(type) {
        // If a marker is plotted remove the marker from the map
        if (marker != null) {
            marker.setMap(null);
            marker = null;
        }

        // Depending on which plot button was pushed..
        var params;
        switch (type) {
            case 'address':
                var address = viewModel.cameraAddress();
                params = { 'address': address };
                break;
            case 'coordinates':
                var lat = viewModel.latitude();
                var lon = viewModel.longitude();
                params = { 'latLng': new google.maps.LatLng(lat, lon) };
                break;
        }

        // Geocode the given params
        geocoder.geocode(params, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                if (checkLocationWithinUnitedStates(results[0])) {
                    handleGeocodeResult(results[0], true);
                }
                else {
                    handleError("Please choose a camera site within the United States.");
                }
            } else {
                handleError("Geocode was not successful for the following reason: " + status);
            }
        });
    }

    /**
     * Used to make sure the map point was placed or dragged 
     * to a location within the United States.
     */
    function checkLocationWithinUnitedStates(result) {
        var addressComponents = result.address_components;
        for (var i = 0; i < addressComponents.length; i++) {
            if (addressComponents[i].types.indexOf("country") != -1) {
                return addressComponents[i].long_name == "United States";
            }
        }

        return false;
    }

    function handleGeocodeResult(result, redraw) {
        if (redraw) {
            map.setCenter(result.geometry.location);
            map.setZoom(17);
            marker = new google.maps.Marker({
                map: map,
                draggable: true,
                title: 'Camera Site',
                position: result.geometry.location
            });

            google.maps.event.addListener(marker, "dragend", function (event) {
                var point = marker.getPosition();
                map.panTo(point);

                geocoder.geocode({ 'latLng': new google.maps.LatLng(point.lat(), point.lng()) }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        if (checkLocationWithinUnitedStates(results[0])) {
                            handleGeocodeResult(results[0], false);
                        }
                        else {
                            handleError("Please choose a camera site within the United States.");
                        }
                    } else {
                        handleError("Geocode was not successful for the following reason: " + status);
                    }
                });
            });
        }

        viewModel.errorMessage("");
        setViews(result);
    }

    function handleError(message) {
        viewModel.errorMessage(message);
        viewModel.cameraAddress("");
        viewModel.latitude("");
        viewModel.longitude("");
    }


    /**
     * Takes a resulting location and updates the viewModel values
     */
    function setViews(result) {
        viewModel.latitude(result.geometry.location.lat());
        viewModel.longitude(result.geometry.location.lng());

        var addressComponents = result.address_components;
        for (var i = 0; i < addressComponents.length; i++) {
            if (addressComponents[i].types.indexOf("administrative_area_level_2") != -1) {
                viewModel.county(addressComponents[i].short_name);
            }
            else if (addressComponents[i].types.indexOf("administrative_area_level_1") != -1) {
                viewModel.state(addressComponents[i].short_name);
            }
        }
    }
</script>
