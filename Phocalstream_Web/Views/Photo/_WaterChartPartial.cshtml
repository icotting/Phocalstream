@model Phocalstream_Web.Models.ViewModels.WaterFlowData

<div id="waterContainer"></div>

<script type="text/javascript">
    $(function () {
        Highcharts.setOptions({
            global: {
                useUTC: false
            }
        });

        var count = @Model.WaterDataValues.Count;

        var waterChart;
        if (count > 0) {
            var waterChart = new Highcharts.Chart({
                colors: ['#058DC7', '#50B432', '#ED561B', '#DDDF00', '#24CBE5', '#64E572', '#FF9655', '#FFF263', '#6AF9C4'],
                chart: {
                    renderTo: 'waterContainer',
                    type: 'area',
                    zoomType: 'x',
                    spacingRight: 20,
                    backgroundColor: {
                        linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                        stops: [
                           [0, 'rgb(255, 255, 255)'],
                           [1, 'rgb(240, 240, 255)']
                        ]
                    },
                    borderWidth: 2,
                    plotBackgroundColor: 'rgba(255, 255, 255, .9)',
                    plotShadow: true,
                    plotBorderWidth: 1
                },
                title: {
                    text: 'Water Data for Station: @Html.DisplayFor(model => model.ClosestStation.StationName)'
                },
                subtitle: {
                    text: 'Source: <a href="http://usgs.com">' +
                        'usgs.com</a> - Click and drag to zoom in'
                },
                xAxis: {
                    type: 'datetime',
                    maxZoom: 7 * 24 * 3600000, // seven days
                    title: {
                        text: null
                    },
                    gridLineWidth: 1,
                    lineColor: '#000',
                    tickColor: '#000',
                    labels: {
                        formatter: function () {
                            return (new Date(this.value)).getMonth() + "/" + (new Date(this.value)).getDate() + "/" + (new Date(this.value)).getFullYear();
                        }
                    }
                },
                yAxis: {
                    minorTickInterval: 'auto',
                    lineColor: '#000',
                    lineWidth: 1,
                    tickWidth: 1,
                    tickColor: '#000',
                    title: {
                        text: '@Html.DisplayFor(model => model.ParameterInfo.UnitOfMeasureDesc)'
                    },
                    labels: {
                        formatter: function () {
                            return this.value;
                        }
                    }
                },
                plotOptions: {
                    area: {
                        fillColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, '#4572A7'],
                                [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
                            ]
                        },
                        lineWidth: 1,
                        marker: {
                            enabled: false
                        },
                        shadow: false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        threshold: null
                    }
                }, 
                series: [{
                    name: '@Html.DisplayFor(model => model.ParameterInfo.ParameterDesc) - @Html.DisplayFor(model => model.ParameterInfo.StatisticDesc)',
                    color: '#4572A7',
                    pointInterval: 24 * 3600 * 1000,
                    pointStart: Date.parse("@Html.DisplayFor(model => model.WaterDataValues.ElementAt(0).DateOf)") - 1000,
                    data: [@Html.DisplayFor(model => model.chartDataValues)]
                }]                
            });
        }
    });


</script>
